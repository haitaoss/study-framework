// 创建文件数
tasks.register('tree') {
    doLast {
        // Create a file tree with a base directory
        ConfigurableFileTree tree = fileTree(dir: 'src/main')

        // Add include and exclude patterns to the tree
        tree.include '**/*.java'
        tree.exclude '**/Abstract*'

        // Create a tree using closure
        tree = fileTree('src') {
            include '**/*.java'
        }

        // Create a tree using a map
        tree = fileTree(dir: 'src', include: '**/*.java')
        tree = fileTree(dir: 'src', includes: ['**/*.java', '**/*.xml'])
        tree = fileTree(dir: 'src', include: '**/*.java', exclude: '**/*test*/**')
    }
}

// 文件树支持的操作：迭代、过滤、组合
tasks.register('tree2') {
    doLast {
        // Iterate over the contents of a tree
        tree.each { File file ->
            println file
        }

        // Filter a tree
        FileTree filtered = tree.matching {
            include 'org/gradle/api/**'
        }

        // Add trees together
        FileTree sum = tree + fileTree(dir: 'src/test')

        // Visit the elements of the tree
        tree.visit { element ->
            println "$element.relativePath => $element.file"
        }
    }
}

// 使用归档文件作为文件树
tasks.register('tree3') {
    // Create a ZIP file tree using path
    FileTree zip = zipTree('someFile.zip')

    // Create a TAR file tree using path
    FileTree tar = tarTree('someFile.tar')

    //tar tree attempts to guess the compression based on the file extension
    //however if you must specify the compression explicitly you can:
    FileTree someTar = tarTree(resources.gzip('someTar.ext'))
}
